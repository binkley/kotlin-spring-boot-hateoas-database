#!/usr/bin/env bash

# Better debugging output when using `bash -x <script>`
export PS4='+${BASH_SOURCE}:${LINENO}:${FUNCNAME[0]:+${FUNCNAME[0]}():} '

# Enable good runtime checks by Bash when executing the script
set -e
set -u
set -o pipefail

function print-usage() {
    cat <<EOU
Usage: $0 [-d|--debug][-h|--help][-s|--server]
EOU
}

function print-help() {
    print-usage
    cat <<EOH

Options:
  -d, --debug   Trace this script
  -h, --help    Print help and exit normally
  -s, --server  Run server in background for duration of script.
                Default is to run against an existing local server instance.
EOH
}

function get-health-status() {
    curl -s -o /dev/null -w '%{http_code}\n' \
        http://localhost:8080/admin/health
}

function shutdown-server {
    local status=$?
    local server_pid="$1"

    http POST :8080/admin/shutdown
    wait "$server_pid" 2>/dev/null || true
    exit "$status"
}

function run-server() {
    ./mvnw -q spring-boot:run \
        -Dspring-boot.run.arguments=--logging.level.root=ERROR &
    local server_pid=$!

    for n in {1..10}
    do
        sleep 1
        http_code="$(get-health-status)" || true
        case "$http_code" in
        000 ) echo "$0: Health check #$n..." ;;  # Still waiting or died
        200 )
            # shellcheck disable=SC2064
            trap "shutdown-server $server_pid" EXIT
            return
            ;;
        * )
            echo "$0: Health error: expected 200; got $http_code" >&2
            exit 1
            ;;
        esac
    done

    # See if server is even running
    if lsof -i :8080
    then
        echo "$0: Server not responding on 8080" >&2
        exit 1
    else
        echo "$0: Server not listening on 8080" >&2
        exit 1
    fi
}

debug=false
server=false
while getopts :dhs-: opt; do
    # Complex, but addresses "--foo=bar" type options
    [[ $opt == - ]] && opt=${OPTARG%%=*} OPTARG=${OPTARG#*=}
    case $opt in
    d | debug) debug=true ;;
    h | help)
        print-help
        exit 0
        ;;
    s | server) server=true ;;
    *)
        print-usage >&2
        exit 2
        ;;
    esac
done
shift $((OPTIND - 1))

$debug && set -x

$server && run-server

: <<'EOC'
# Output should look like:

== REST
HTTP/1.1 200
Connection: keep-alive
Content-Type: application/json
Date: Wed, 03 Aug 2022 14:21:21 GMT
Keep-Alive: timeout=60
Transfer-Encoding: chunked

{
    "authorId": "author-1",
    "id": "book-1",
    "isbn": "0-00-000000-0",
    "moby": true,
    "pages": 223,
    "title": "Harry Potter and the Philosopher's Stone"
}

== REST WITH PAGING (results vary)
HTTP/1.1 200
Connection: keep-alive
Content-Type: application/json
Date: Tue, 29 Nov 2022 19:16:32 GMT
Keep-Alive: timeout=60
Transfer-Encoding: chunked

[
    {
        "authorId": "author-2",
        "id": "book-2",
        "isbn": "0-00-000000-1",
        "moby": false,
        "pages": 635,
        "title": "Moby Dick"
    }
]

== HATEOAS
HTTP/1.1 200
Connection: keep-alive
Content-Type: application/hal+json
Date: Wed, 03 Aug 2022 14:20:43 GMT
Keep-Alive: timeout=60
Transfer-Encoding: chunked
Vary: Origin
Vary: Access-Control-Request-Method
Vary: Access-Control-Request-Headers

{
    "_links": {
        "book": {
            "href": "http://localhost:8080/data/books/book-1"
        },
        "self": {
            "href": "http://localhost:8080/data/books/book-1"
        }
    },
    "authorId": "author-1",
    "moby": true,
    "pages": 223,
    "title": "Harry Potter and the Philosopher's Stone"
}

== GRAPHQL
HTTP/1.1 200
Connection: keep-alive
Content-Type: application/json
Date: Wed, 03 Aug 2022 14:20:03 GMT
Keep-Alive: timeout=60
Transfer-Encoding: chunked

{
    "data": {
        "bookByID": {
            "author": {
                "firstName": "Joanne",
                "id": "author-1",
                "lastName": "Rowling"
            },
            "id": "book-1",
            "isbn": "0-00-000000-0",
            "moby": true,
            "pages": 223,
            "title": "Harry Potter and the Philosopher's Stone"
        }
    }
}

== GRAPHQL SCHEMA
HTTP/1.1 200
Connection: keep-alive
Content-Length: 1312
Content-Type: text/plain;charset=UTF-8
Date: Thu, 04 Aug 2022 18:44:48 GMT
Keep-Alive: timeout=60

"Marks the field, argument, input field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
  ) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if`'argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

"Books do not write themselves, you know."
type Author {
  "TODO: A first/last name pair assumes cultural conventions."
  firstName: String
  id: ID!
  lastName: String
}

"Read more books."
type Book {
  "TODO: Should be a plural, not a singular."
  author: Author
  id: ID!
  isbn: String
  moby: Boolean
  pages: Int
  title: String
}

"TODO: Support Dewey Decimal and others."
type Query {
  " A comment that should be ignored by documentation tools"
  bookByID(id: ID!): Book
}
EOC

cat <<'EOM'
== REST
(See also http://localhost:8080/rest in a browser)
http://localhost:8080/rest/books/book-1
EOM
http :8080/rest/books/book-1

cat <<'EOM'
== REST WITH PAGING (results vary)
(See also http://localhost:8080/rest in a browser)
http://localhost:8080/rest/books?page=1&size=1
EOM
http ':8080/rest/books/book-1?page=1&size=1'

cat <<'EOM'
== HATEOAS
(See also http://localhost:8080/data in a browser)
http://localhost:8080/data/books/book-1
EOM
http :8080/data/books/book-1

cat <<'EOM'
== GRAPHQL
(See also http://localhost:8080/graphiql in a browser)
http://localhost:8080/graphql query='<...>'
EOM
http :8080/graphql query='{
  bookByID(id: "book-1") {
    id
    isbn
    title
    pages
    moby
    author {
      id
      firstName
      lastName
    }
  }
}'

cat <<'EOM'
== GRAPHQL SCHEMA
(See also http://localhost:8080/graphiql in a browser)
http://localhost:8080/graphql/schema
EOM
http :8080/graphql/schema

cat <<'EOM'
== FAILURES
(See also http://localhost:8080/data/cats/cats-are-funny-but-not-books in a browser)
This is a 404 although the message about "static resource" may be misleading.
http://localhost:8080/data/cats/cats-are-funny-but-not-books
EOM
http :8080/data/cats/cats-are-funny-but-not-books
